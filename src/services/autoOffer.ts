import { collection, query, where, getDocs, addDoc, doc, getDoc, updateDoc, increment } from 'firebase/firestore';
import { db } from './firebase';
import type { Event, User } from '../types';

export async function processAutoOffers(event: Event) {
  try {
    // Get all artists with auto-offer enabled
    const artistsQuery = query(
      collection(db, 'users'),
      where('role', '==', 'artist'),
      where('autoOffer.enabled', '==', true)
    );

    const artistsSnapshot = await getDocs(artistsQuery);

    for (const artistDoc of artistsSnapshot.docs) {
      const artist = artistDoc.data() as User;

      // Check if artist meets criteria
      const autoOffer = artist.autoOffer!;
      const meetsMinCache = event.minCache >= autoOffer.minCache;
      const hasMatchingGenre = event.styles.some(style => 
        autoOffer.genres.includes(style)
      );

      if (meetsMinCache && hasMatchingGenre) {
        // Check if already applied
        const existingCandidacy = await getDocs(query(
          collection(db, 'candidacies'),
          where('artistId', '==', artistDoc.id),
          where('eventId', '==', event.id)
        ));

        if (existingCandidacy.empty) {
          // Check credits for free plan
          if (artist.planId === 'free') {
            if (artist.credits < 1) {
              console.log(`Artist ${artist.email} has no credits for auto-offer`);
              continue;
            }

            // Deduct credit
            await updateDoc(doc(db, 'users', artistDoc.id), {
              credits: increment(-1)
            });
          }

          // Create candidacy
          await addDoc(collection(db, 'candidacies'), {
            artistId: artistDoc.id,
            eventId: event.id,
            status: 'PENDENTE',
            createdAt: new Date(),
            autoGenerated: true,
          });

          console.log(`Auto-offer created for artist ${artist.email}`);
        }
      }
    }
  } catch (error) {
    console.error('Error processing auto-offers:', error);
  }
}